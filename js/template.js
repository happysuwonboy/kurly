class Product {
  constructor(prod_name, org_price, imgPath) {
    this.prod_name = prod_name
    this.org_price = org_price
    this.imgPath = imgPath
  }
}

const sectionTitle = [
  ['ÎπõÏù¥ ÎÇòÎäî ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÑ†Î¨º ‚ú®', 'ÏóêÏä§Ìã∞Î°úÎçîÎ∂ÄÌÑ∞ 1++ÌïúÏö∞ÏÑ∏Ìä∏ÍπåÏßÄ!'],
  ['üíñÎ∑∞Ìã∞Ïª¨Î¶¨ÌéòÏä§ÌÉÄ Îã®ÎèÖ ÌäπÍ∞Ä', 'Í∞ÄÏû• Ï¢ãÏùÄ Í∞ÄÍ≤©ÏúºÎ°ú ÎìùÌÖúÌïòÏÑ∏Ïöî !'],
  ['Ï∞ú ÎßéÏùÄ ÏáºÌïëÎ∞±¬∑Ìè¨Ïû• ÏÑ†Î¨ºüéÄ', 'ÎπÑÏ£ºÏñºÍ≥º ÌÄÑÎ¶¨Ìã∞ Î≥¥Ïû•, ÏµúÎåÄ 80% Ìï†Ïù∏'],
  ['ÎÜìÏπòÎ©¥ ÌõÑÌöåÌï† Í∞ÄÍ≤©', ''],
  ['Í∞ÄÏÑ±ÎπÑ ÏµúÍ≥† 2Ïù∏Î∂Ñ ÏöîÎ¶¨', 'Ïù∏Îãπ 7Ï≤úÏõê ÎØ∏ÎßåÏúºÎ°ú Ï¶êÍ∏∞Îäî ÏöîÎ¶¨'],
  ['Ï∂îÏÑù 1DAY: Í±¥Í∞ï ÏÑ†Î¨ºüí™', 'Îã® 24ÏãúÍ∞Ñ! Í±¥Í∞ïÏÑ†Î¨º ÏµúÎåÄ 15ÎßåÏõê Ïø†Ìè∞'],
  ['‚úåMZÏÑ∏ÎåÄ Ïù∏Í∏∞ BEST ÏÉÅÌíà', 'MZÏÑ∏ÎåÄÎùºÎ©¥ Î™®Î•º ÏàòÍ∞Ä ÏóÜÎäî Ïª¨Î¶¨ Ïù∏Í∏∞ÌÖú'],
  ['MZÏÑ∏ÎåÄÎùºÎ©¥ Î™®Î•º ÏàòÍ∞Ä ÏóÜÎäî Ïª¨Î¶¨ Ïù∏Í∏∞ÌÖú', ''],
  ['ÎØøÍ≥†Î®πÎäî ÌíÄÎ¨¥Ïõê ÎπÖÏÑ∏Ïùº üåø', 'Ïã†ÏÉÅ Í≥®ÎùºÎã¥Í∏∞Î∂ÄÌÑ∞ 20% Ïø†Ìè∞ÍπåÏßÄ!'],
  ['9Ïõî Î¶¨ÎπôÏã†ÏÉÅ Îã¥ÏúºÎü¨Í∞ÄÍ∏∞üõí', 'Í∏àÏ£º Ïò§Ìîà Ìï´Ìïú Ïã†ÏÉÅÎ™®Ïùåüòé']
]

// const prodList = [
//   new Product('[Ï†ÑÏ£º Î≤†ÌÖåÎûë] Ïù∏Í∏∞ Î©îÎâ¥ 5Ï¢Ö (ÌÉù2)', 8900, './img/products-img/product15.jpg'),
//   new Product('[Îã•ÌÑ∞Î∏åÎ°úÎÑàÏä§] Ìì®Ïñ¥ Ï∫êÏä§Ìã∏ ÏÜù 950ml 5Ï¢Ö (ÌÉù1)(+ÌéåÌîÑ Ï¶ùÏ†ï)', 33000, './img/products-img/product16.jpg'),
//   new Product('[ÏÑ†Î¨ºÏÑ∏Ìä∏] ÎåÄÏÉÅ Í±¥Í∞ïÌïú Í∞±ÎÖÑÍ∏∞Î•º ÏúÑÌïú Î¶¨Î¥ÑÏàúÏï° (30ÏùºÎ∂Ñ)', 62000, './img/products-img/product17.jpg'),
//   new Product('Îç¥ÎßàÌÅ¨ Ïú†ÏÇ∞Í∑†Ïù¥ÏïºÍ∏∞ ÏÑ†Î¨ºÏÑ∏Ìä∏ (180ÏùºÎ∂Ñ)+(ÏáºÌïëÎ∞±Ï¶ùÏ†ï)', 276000, './img/products-img/product25.jpg'),
//   new Product('[Í∏ÄÎûòÎìú] Îß§ÏßÅÎû© ÎØ∏Îãà+Îß§ÏßÅÎ∞± ÏÑ∏Ìä∏ 6Ï¢Ö (ÌÉù1)',16500,'./img/products-img/product26.jpg'),
//   new Product('[Î∞úÎÆ§Îã§] Ìåü Ï†ÑÍ∏∞Ï£ºÏ†ÑÏûê 2Ï¢Ö (ÌôîÏù¥Ìä∏/Î∏îÎûô ÌÉù1)',199000,'./img/products-img/product27.jpg'),
//   new Product('[ÏÑ§ÌôîÏàò] ÏûêÏùå 2Ï¢Ö ÏÑ∏Ìä∏',140000,'./img/products-img/product7.jpg'),
//   new Product('[ÏÑ†Î¨ºÏÑ∏Ìä∏] Ìö°ÏÑ±Ï∂ïÌòëÌïúÏö∞ 1++ ÌîÑÎ¶¨ÎØ∏ÏóÑ 1Ìò∏ (ÎÉâÏû•) (ÏòàÏïΩÏùº ÏàòÎ†π)',259000,'./img/products-img/product24.jpg'),
//   new Product('ÌîÑÎ¶¨ÎØ∏ÏóÑ Íµ¨Í∞ï ÏÑ†Î¨ºÏÑ∏Ìä∏_Ìà¨Ïä§ÎÖ∏Ìä∏, Ïú†ÏãúÎ™∞ 5Ï¢Ö (ÌÉù1)',80000,'./img/products-img/product28.jpg'),
//   new Product('[Îç∏Î¶¨ÏπòÏò§] Ìò∏Ï£ºÏÇ∞ Î™©Ï¥àÏú° ÏïàÏã¨ Ïä§ÌÖåÏù¥ÌÅ¨ 250g (ÎÉâÏû•)',22900,'./img/products-img/product5.jpg'),
//   new Product('[ÏãúÍ≥®Î≥¥ÏåàÍ≥º Í∞êÏûêÏòπÏã¨Ïù¥] Í∞êÏûê ÏòπÏã¨Ïù¥ ÏπºÍµ≠Ïàò (2Ïù∏Î∂Ñ)',10500,'./img/products-img/product29.jpg'),
//   new Product('[Ïù¥Ïó∞Î≥µÏùò Î™©ÎûÄ] ÏßúÏû•Î©¥ 2Ïù∏Î∂Ñ',9900,'./img/products-img/product30.jpg'),
//   new Product('[ÌïúÌåü] ÏπòÏ¶à Î∂ÄÎåÄÏ∞åÍ∞ú 1858g(ÎÉâÏû•)',13500,'./img/products-img/product31.jpg'),
//   new Product('[ÌÜµÎºà] ÎºàÌï¥Ïû•Íµ≠ 900gX2Í∞úÏûÖ',21000,'./img/products-img/product32.jpg'),
// ]

let jsonData = await fetch('./json-data/product.json')
let prodList = await jsonData.json(); 


const couponName = [
  'ÏùºÏùºÌäπÍ∞Ä', '5%Ïø†Ìè∞', '10%Ïø†Ìè∞+Ï†ÅÎ¶Ω', '15%Ïø†Ìè∞', '20%Ïø†Ìè∞', '+Í∏àÏï°ÎåÄÎ≥Ñ Ïø†Ìè∞', '+ÏµúÎåÄ2ÎßåÏõêÏø†Ìè∞', '+ÏµúÎåÄ3ÎßåÏõêÏø†Ìè∞'
]


const printRestTime = (prodSecNum) => {
  let now = new Date();
  let tomorrow = new Date(new Date().setDate(now.getDate() + 1))
  let tomorrowEleven = new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), 11, 0, 0) // ÎãπÏùº 11Ïãú ÏßÄÎÇú Í≤ΩÏö∞
  let todayEleven = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 11, 0, 0); // ÎãπÏùº 11Ïãú ÏßÄÎÇòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
  let restTime = parseInt((tomorrowEleven.getTime() - now.getTime()) / 1000);
  restTime = todayEleven.getTime() - now.getTime() > 0 ? parseInt((todayEleven.getTime() - now.getTime()) / 1000) : restTime;
  let restTimeHour = parseInt(restTime / (60 * 60))
  let restTimeMin = parseInt((restTime % (60 * 60)) / 60)
  let restTimeSec = parseInt((restTime % (60 * 60)) % 60)
  restTimeHour = restTimeHour < 10 ? `0${restTimeHour}` : restTimeHour
  restTimeMin = restTimeMin < 10 ? `0${restTimeMin}` : restTimeMin
  restTimeSec = restTimeSec < 10 ? `0${restTimeSec}` : restTimeSec
  document.querySelector(`.prod-section${prodSecNum} .timeout-resttime`).innerText = `${restTimeHour}:${restTimeMin}:${restTimeSec}`
}

const randInt = (a, b) => {
  if ((a === 0 || a) && b) {
    if (typeof a === 'number' && typeof b === 'number') {
      let num1 = a
      let num2 = b
      return num1 + Math.floor(Math.random() * (num2 - num1 + 1))
    } else { return }
  } else if (a && !b) {
    if (typeof a === 'string' && a.includes("~")) {
      let arr = a.split("~").filter(a => a)
      let num1 = parseInt(arr[0])
      let num2 = parseInt(arr[1])
      return num1 + Math.floor(Math.random() * (num2 - num1 + 1))
    } else { return }
  } else { return }
}

const setProdSwiper = (section) => {
  const homeProdSwiper = new Swiper(`${section} .prod-container`, {
    autoplay: false,
    loop: false,
    spaceBetween: 15,
    navigation: {
      nextEl: `${section} .swiper-button-next`,
      prevEl: `${section} .swiper-button-prev`,
    },
    breakpoints: {
      500: {
        slidesPerView: 2,
        slidesPerGroup: 2,
      },
      1000: {
        slidesPerView: 3,
        slidesPerGroup: 3,
      },
      1200: {
        slidesPerView: 4,
        slidesPerGroup: 4,
      },
    }
  })
}

const makeSwiperSection = (sectionNum) => {
  let titleIdx = randInt(0, sectionTitle.length - 1)
  let prodListCopy = prodList.map(v => { return { ...v } })
  prodListCopy.sort(() => Math.random() - 0.5);
  prodListCopy = prodListCopy.slice(0, randInt(6, 10));
  return `
  <section class="prod-section${sectionNum} common-prod-section swiper-prod-section">
    <div class="center">
      <span class="prod-section-title">
        ${sectionTitle[titleIdx][0]}
      </span>
      <button class="prod-section-more"><i class="fa-solid fa-chevron-right"></i></button>
      <p class="prod-section-subtitle">${sectionTitle[titleIdx][1]}</p>
      <div class="prod-container">
        <div class="swiper-wrapper">

      ${prodListCopy.map(prod => {
    let { prod_name, org_price, imgPath } = prod;
    let [orgPrice, dcPer, dcPrice] = setProdPrice(org_price);
    return `
        <div class="product swiper-slide">
          <figure class="prod-figure">
            <img src="${imgPath}" alt="">
            <figcaption>${couponName[randInt(0, couponName.length - 1)]}</figcaption>
          </figure>
          <button class="prod-cart-btn"><i class="fa-solid fa-cart-shopping"></i> Îã¥Í∏∞</button>
          <h3 class="prod-name">${prod_name}</h3>
          <span class="original-price">${orgPrice}Ïõê</span>
          <div class="discount">
            <span class="dc-percent">${dcPer}%</span>
            <span class="dc-price">${dcPrice}Ïõê</span>
          </div>
        </div> 
        `
  }).join('\n')}
        
          </div>
      </div>
      <button class="swiper-button-prev">
        <i class="fa-solid fa-chevron-left"></i>
      </button>
      <button class="swiper-button-next">
        <i class="fa-solid fa-chevron-right"></i>
      </button>

    </div> 
  </section> 
    `
}

const makeTimeoutSection = (sectionNum) => {
  let prodListCopy = prodList.map(v => { return { ...v } })
  prodListCopy.sort(() => Math.random() - 0.5);
  prodListCopy = prodListCopy.slice(0, randInt(2, 3));
  return `
  <section class="prod-section${sectionNum} common-prod-section home-timeout-section">
    <div class="center">
      <div class="timeout-info-container">
        <h2 class="timeout-title">ÏµúÏ†ÄÍ∞Ä ÎèÑÏ†Ñ!</h2>
        <h3 class="timeout-subtitle">Î¶¨Îπô ÌïÑÏàòÌÖú ÌäπÍ∞Ä</h3>
        <div class="timeout-clock-container">
          <i class="fa-solid fa-clock"></i>
          <span class="timeout-resttime"></span>
        </div>
        <p class="timeout-desc">ÎßùÏÑ§Ïù¥Î©¥ Îä¶Ïñ¥Ïöî!</p>
      </div>
      <div class="prod-container">

      ${prodListCopy.map(prod => {
    let { prod_name, org_price, imgPath } = prod;
    let [orgPrice, dcPer, dcPrice] = setProdPrice(org_price);
    return `
        <div class="product">
          <figure class="prod-figure">
            <img src="${imgPath}" alt="">
            <figcaption>ÏùºÏùºÌäπÍ∞Ä</figcaption>
          </figure>
          <button class="prod-cart-btn"><i class="fa-solid fa-cart-shopping"></i> Îã¥Í∏∞</button>
          <h3 class="prod-name">${prod_name}</h3>
          <span class="original-price">${orgPrice}Ïõê</span>
            <div class="discount">
              <span class="dc-percent">${dcPer}%</span>
              <span class="dc-price">${dcPrice}Ïõê</span>
            </div>
        </div> 
        `
  }).join('\n')}

      </div>
    </div>
  </section> 
  `
}

export const displayTemplate = (startSectionNum) => {
  document.querySelector('main').insertAdjacentHTML('beforeend', `
    <section class="banner-section common-prod-section">
      <div class="center">
       <img src="./img/section-banner-img${randInt(1, 5)}.png" alt="">
     </div>
    </section>
    ${makeSwiperSection(startSectionNum)}
    ${makeSwiperSection(startSectionNum + 1)}
    ${makeTimeoutSection(startSectionNum + 2)}
    ${makeSwiperSection(startSectionNum + 3)}
    `)
  setProdSwiper(`.prod-section${startSectionNum}`)
  setProdSwiper(`.prod-section${startSectionNum + 1}`)
  setProdSwiper(`.prod-section${startSectionNum + 3}`)
  printRestTime(startSectionNum + 2)
  const elevenTimeOut = setInterval(() => {
    printRestTime(startSectionNum + 2);
  }, 1000)
}

const setProdPrice = (originalPrice) => {
  originalPrice = Math.round(originalPrice / 100) * 100
  let dcPercent = randInt(10, 60);
  let dcPrice = originalPrice * (1 - dcPercent / 100);
  dcPrice = Math.floor(dcPrice / 100) * 100
  return [originalPrice.toLocaleString(), dcPercent, dcPrice.toLocaleString()];
}