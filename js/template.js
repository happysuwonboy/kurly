// ÏÉÅÌíà ÏÑπÏÖò ÌÉÄÏù¥ÌãÄ Î¶¨Ïä§Ìä∏
const sectionTitle = [
  ['ÎπõÏù¥ ÎÇòÎäî ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÑ†Î¨º ‚ú®', 'ÏóêÏä§Ìã∞Î°úÎçîÎ∂ÄÌÑ∞ 1++ÌïúÏö∞ÏÑ∏Ìä∏ÍπåÏßÄ!'],
  ['üíñÎ∑∞Ìã∞Ïª¨Î¶¨ÌéòÏä§ÌÉÄ Îã®ÎèÖ ÌäπÍ∞Ä', 'Í∞ÄÏû• Ï¢ãÏùÄ Í∞ÄÍ≤©ÏúºÎ°ú ÎìùÌÖúÌïòÏÑ∏Ïöî !'],
  ['Ï∞ú ÎßéÏùÄ ÏáºÌïëÎ∞±¬∑Ìè¨Ïû• ÏÑ†Î¨ºüéÄ', 'ÎπÑÏ£ºÏñºÍ≥º ÌÄÑÎ¶¨Ìã∞ Î≥¥Ïû•, ÏµúÎåÄ 80% Ìï†Ïù∏'],
  ['ÎÜìÏπòÎ©¥ ÌõÑÌöåÌï† Í∞ÄÍ≤©', ''],
  ['Í∞ÄÏÑ±ÎπÑ ÏµúÍ≥† 2Ïù∏Î∂Ñ ÏöîÎ¶¨', 'Ïù∏Îãπ 7Ï≤úÏõê ÎØ∏ÎßåÏúºÎ°ú Ï¶êÍ∏∞Îäî ÏöîÎ¶¨'],
  ['Ï∂îÏÑù 1DAY: Í±¥Í∞ï ÏÑ†Î¨ºüí™', 'Îã® 24ÏãúÍ∞Ñ! Í±¥Í∞ïÏÑ†Î¨º ÏµúÎåÄ 15ÎßåÏõê Ïø†Ìè∞'],
  ['‚úåMZÏÑ∏ÎåÄ Ïù∏Í∏∞ BEST ÏÉÅÌíà', 'MZÏÑ∏ÎåÄÎùºÎ©¥ Î™®Î•º ÏàòÍ∞Ä ÏóÜÎäî Ïª¨Î¶¨ Ïù∏Í∏∞ÌÖú'],
  ['MZÏÑ∏ÎåÄÎùºÎ©¥ Î™®Î•º ÏàòÍ∞Ä ÏóÜÎäî Ïª¨Î¶¨ Ïù∏Í∏∞ÌÖú', ''],
  ['ÎØøÍ≥†Î®πÎäî ÌíÄÎ¨¥Ïõê ÎπÖÏÑ∏Ïùº üåø', 'Ïã†ÏÉÅ Í≥®ÎùºÎã¥Í∏∞Î∂ÄÌÑ∞ 20% Ïø†Ìè∞ÍπåÏßÄ!'],
  ['9Ïõî Î¶¨ÎπôÏã†ÏÉÅ Îã¥ÏúºÎü¨Í∞ÄÍ∏∞üõí', 'Í∏àÏ£º Ïò§Ìîà Ìï´Ìïú Ïã†ÏÉÅÎ™®Ïùåüòé']
]

// Ïø†Ìè∞ Ïù¥Î¶Ñ Î¶¨Ïä§Ìä∏
const couponName = [
  'ÏùºÏùºÌäπÍ∞Ä', '5%Ïø†Ìè∞', '10%Ïø†Ìè∞+Ï†ÅÎ¶Ω', '15%Ïø†Ìè∞', '20%Ïø†Ìè∞', '+Í∏àÏï°ÎåÄÎ≥Ñ Ïø†Ìè∞', '+ÏµúÎåÄ2ÎßåÏõêÏø†Ìè∞', '+ÏµúÎåÄ3ÎßåÏõêÏø†Ìè∞'
]

/**
 * 1Ï¥àÎßàÎã§ ÌÉÄÏù¥Î®∏Í∞Ä Ï∂úÎ†•ÎêòÎäî Í∏∞Îä• ÏÑ∏ÌåÖ 
 * @param {number} section ÏÑ∏ÌåÖÌï† ÏÑπÏÖò 
 * @param {number} hour Í∏∞Ï§Ä ÏãúÍ∞Ñ ÏÑ§Ï†ï 
 * @param {number} min Í∏∞Ï§Ä Î∂Ñ ÏÑ§Ï†ï
 */
export const printRestTime = (section, hour=11, min=0) => {
  let now = new Date();
  let tomorrow = new Date(new Date().setDate(now.getDate() + 1))
  let tomorrowEleven = new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate(), hour, min, 0) // ÎãπÏùº 11Ïãú ÏßÄÎÇú Í≤ΩÏö∞
  let todayEleven = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hour, min, 0); // ÎãπÏùº 11Ïãú ÏßÄÎÇòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
  let restTime = parseInt((tomorrowEleven.getTime() - now.getTime()) / 1000);
  restTime = todayEleven.getTime() - now.getTime() > 0 ? parseInt((todayEleven.getTime() - now.getTime()) / 1000) : restTime;
  let restTimeHour = parseInt(restTime / (60 * 60))
  let restTimeMin = parseInt((restTime % (60 * 60)) / 60)
  let restTimeSec = parseInt((restTime % (60 * 60)) % 60)
  restTimeHour = restTimeHour < 10 ? `0${restTimeHour}` : restTimeHour
  restTimeMin = restTimeMin < 10 ? `0${restTimeMin}` : restTimeMin
  restTimeSec = restTimeSec < 10 ? `0${restTimeSec}` : restTimeSec
  document.querySelector(`${section} .timeout-resttime`).innerText = `${restTimeHour}:${restTimeMin}:${restTimeSec}`
}

/**
 * ÎÇúÏàò ÏÉùÏÑ± Ìï®Ïàò
 * @param {number} a ÏÉùÏÑ± Î≤îÏúÑ ÏµúÏÜüÍ∞í
 * @param {number} b ÏÉùÏÑ± Î≤îÏúÑ ÏµúÎåìÍ∞í
 * @returns a~b Î≤îÏúÑÏùò Ï†ïÏàò Ï§ë ÌïòÎÇò
 */
const randInt = (a, b) => {
  if ((a === 0 || a) && b) {
    if (typeof a === 'number' && typeof b === 'number') {
      let num1 = a
      let num2 = b
      return num1 + Math.floor(Math.random() * (num2 - num1 + 1))
    } else { return }
  } else if (a && !b) {
    if (typeof a === 'string' && a.includes("~")) {
      let arr = a.split("~").filter(a => a)
      let num1 = parseInt(arr[0])
      let num2 = parseInt(arr[1])
      return num1 + Math.floor(Math.random() * (num2 - num1 + 1))
    } else { return }
  } else { return }
}

const setProdSwiper = (section) => {
  const homeProdSwiper = new Swiper(`${section} .prod-container`, {
    autoplay: false,
    loop: false,
    spaceBetween: 15,
    navigation: {
      nextEl: `${section} .swiper-button-next`,
      prevEl: `${section} .swiper-button-prev`,
    },
    breakpoints: {
      500: {
        slidesPerView: 2,
        slidesPerGroup: 2,
      },
      1000: {
        slidesPerView: 3,
        slidesPerGroup: 3,
      },
      1200: {
        slidesPerView: 4,
        slidesPerGroup: 4,
      },
    }
  })
}

const makeSwiperSection = async (sectionNum) => {
  let jsonData = await fetch('./json-data/product.json')
  let prodList = await jsonData.json(); 
  prodList.sort(() => Math.random() - 0.5);
  prodList = prodList.slice(0, randInt(6, 10));
  let titleIdx = randInt(0, sectionTitle.length - 1)
  return `
  <section class="prod-section${sectionNum} common-prod-section swiper-prod-section">
    <div class="center">
      <span class="prod-section-title">
        ${sectionTitle[titleIdx][0]}
      </span>
      <button class="prod-section-more"><i class="fa-solid fa-chevron-right"></i></button>
      <p class="prod-section-subtitle">${sectionTitle[titleIdx][1]}</p>
      <div class="prod-container">
        <div class="swiper-wrapper">

      ${prodList.map(prod => {
    let { prod_name, imgPath } = prod;
    let [orgPrice, dcPer, dcPrice] = setProdPrice(prod);
    return `
        <div class="product swiper-slide">
          <figure class="prod-figure">
            <img src="${imgPath}" alt="">
            <figcaption>${couponName[randInt(0, couponName.length - 1)]}</figcaption>
          </figure>
          <button class="prod-cart-btn"><i class="fa-solid fa-cart-shopping"></i> Îã¥Í∏∞</button>
          <h3 class="prod-name">${prod_name}</h3>
          <span class="original-price">${orgPrice}Ïõê</span>
          <div class="discount">
            <span class="dc-percent">${dcPer}%</span>
            <span class="dc-price">${dcPrice}Ïõê</span>
          </div>
        </div> 
        `
  }).join('\n')}
        
          </div>
      </div>
      <button class="swiper-button-prev">
        <i class="fa-solid fa-chevron-left"></i>
      </button>
      <button class="swiper-button-next">
        <i class="fa-solid fa-chevron-right"></i>
      </button>

    </div> 
  </section> 
    `
}

const makeTimeoutSection = async (sectionNum) => {
  let jsonData = await fetch('./json-data/product.json')
  let prodList = await jsonData.json(); 
  prodList.sort(() => Math.random() - 0.5);
  prodList = prodList.slice(0, randInt(2, 3));
  let randomTime = randInt(9, 15);
  let randomTimeStr = randomTime >= 13 ? `Ïò§ÌõÑ ${randomTime-12}Ïãú Ï†ÑÍπåÏßÄ !` : `Ïò§Ï†Ñ ${randomTime}Ïãú Ï†ÑÍπåÏßÄ !`
  randomTimeStr = randomTime === 12 ? 'ÏûêÏ†ï Ï†ÑÍπåÏßÄ !' : randomTimeStr
  return `
  <section class="prod-section${sectionNum} common-prod-section home-timeout-section">
    <div class="center">
      <div class="timeout-info-container">
        <h2 class="timeout-title">ÏµúÏ†ÄÍ∞Ä ÎèÑÏ†Ñ!</h2>
        <h3 data-time="${randomTime}" class="timeout-subtitle">${randomTimeStr}</h3>
        <div class="timeout-clock-container">
          <i class="fa-solid fa-clock"></i>
          <span class="timeout-resttime"></span>
        </div>
        <p class="timeout-desc">ÎßùÏÑ§Ïù¥Î©¥ Îä¶Ïñ¥Ïöî!</p>
      </div>
      <div class="prod-container">

      ${prodList.map(prod => {
    let { prod_name, imgPath } = prod;
    let [orgPrice, dcPer, dcPrice] = setProdPrice(prod);
    return `
        <div class="product">
          <figure class="prod-figure">
            <img src="${imgPath}" alt="">
            <figcaption>ÏùºÏùºÌäπÍ∞Ä</figcaption>
          </figure>
          <button class="prod-cart-btn"><i class="fa-solid fa-cart-shopping"></i> Îã¥Í∏∞</button>
          <h3 class="prod-name">${prod_name}</h3>
          <span class="original-price">${orgPrice}Ïõê</span>
            <div class="discount">
              <span class="dc-percent">${dcPer}%</span>
              <span class="dc-price">${dcPrice}Ïõê</span>
            </div>
        </div> 
        `
  }).join('\n')}

      </div>
    </div>
  </section> 
  `
}

export const displaySections = async (startSectionNum) => {
  document.querySelector('main').insertAdjacentHTML('beforeend', `
    <section class="banner-section common-prod-section">
      <div class="center">
       <img src="./img/section-banner-img${randInt(1, 5)}.png" alt="">
     </div>
    </section>
    ${await makeSwiperSection(startSectionNum)}
    ${await makeSwiperSection(startSectionNum + 1)}
    ${await makeTimeoutSection(startSectionNum + 2)}
    ${await makeSwiperSection(startSectionNum + 3)}
    `)
  setProdSwiper(`.prod-section${startSectionNum}`)
  setProdSwiper(`.prod-section${startSectionNum + 1}`)
  setProdSwiper(`.prod-section${startSectionNum + 3}`)
  let time = document.querySelector(`.prod-section${startSectionNum + 2} .timeout-subtitle`).getAttribute('data-time')
  printRestTime(`.prod-section${startSectionNum + 2}`, time)
  const timeOut = setInterval(() => {
    printRestTime(`.prod-section${startSectionNum + 2}`, time);
  }, 1000)
}

const setProdPrice = (prod) => {
  let {org_price, dc_percent} = prod;
  org_price = Math.round(org_price / 100) * 100
  let dcPrice = org_price * (1 - dc_percent / 100);
  dcPrice = Math.floor(dcPrice / 100) * 100
  return [org_price.toLocaleString(), dc_percent, dcPrice.toLocaleString()];
}